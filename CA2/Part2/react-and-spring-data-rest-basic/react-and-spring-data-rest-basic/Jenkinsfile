pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'DHCred'
        DOCKER_IMAGE = "anaspinto/ca5part2:${env.BUILD_ID}"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Check out the repository
                    checkout([$class: 'GitSCM',
                              branches: [[name: 'main']],
                              userRemoteConfigs: [[url: 'https://github.com/AnaSofiaFigueiroaPinto/devops-23-24-JPE-PSM-1231822.git']]])
                }
            }
        }

        stage('Assemble') {
            steps {
                script {
                    // Navigate to the project directory and run Gradle assemble
                    dir('CA2/Part2/react-and-spring-data-rest-basic/react-and-spring-data-rest-basic') {
                        sh 'chmod +x ./gradlew'
                        sh './gradlew clean assemble'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Navigate to the project directory and run Gradle test
                    dir('CA2/Part2/react-and-spring-data-rest-basic/react-and-spring-data-rest-basic') {
                        sh './gradlew test'
                    }
                }
            }
            post {
                always {
                    // Archive test results
                    junit 'CA2/Part2/react-and-spring-data-rest-basic/react-and-spring-data-rest-basic/build/test-results/test/*.xml'
                }
            }
        }

        stage('Javadoc') {
            steps {
                script {
                    // Navigate to the project directory and generate Javadoc
                    dir('CA2/Part2/react-and-spring-data-rest-basic/react-and-spring-data-rest-basic') {
                        sh './gradlew javadoc'
                    }
                }
            }
            post {
                always {
                    // Publish Javadoc
                    publishHTML(target: [
                            allowMissing         : false,
                            alwaysLinkToLastBuild: false,
                            keepAll              : true,
                            reportDir            : 'CA2/Part2/react-and-spring-data-rest-basic/react-and-spring-data-rest-basic/build/docs/javadoc',
                            reportFiles          : 'index.html',
                            reportName           : 'Javadoc'
                    ])
                }
            }
        }

        stage('Archive') {
            steps {
                script {
                    // Archive the built WAR file
                    archiveArtifacts artifacts: 'CA2/Part2/react-and-spring-data-rest-basic/react-and-spring-data-rest-basic/build/libs/*.war', fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    dir('CA2/Part2/react-and-spring-data-rest-basic/react-and-spring-data-rest-basic') {
                        // Copy WAR file to Docker build context
                        sh 'cp build/libs/react-and-spring-data-rest-basic-0.0.1-SNAPSHOT.war .'

                        // Dynamically generate Dockerfile       // To make the App functional by connecting to the database the ENV line was added

                        def dockerfileContent = """
                            FROM tomcat:10.0.20-jdk17-temurin

                            COPY *.war /usr/local/tomcat/webapps/
                            ENV SPRING_DATASOURCE_URL=jdbc:h2:mem:jpadb
                        """
                        writeFile file: 'Dockerfile', text: dockerfileContent

                        // Build Docker image
                        script {
                        docker.build("${DOCKER_IMAGE}")
                        }
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
    }

}

